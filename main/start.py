#!/usr/bin/env python3
"""
CrazeDynPanel v2.0 - Automated Installer & Launcher
Professional Minecraft Server Manager Setup
"""

import os
import sys
import shutil
import subprocess
import platform
from pathlib import Path

def print_banner():
    """Display the welcome banner"""
    print("\033[93m")  # Yellow text
    print("=" * 80)
    print()
    print("   ____                     ____              ____              __")
    print("  / ___|__ _ __ __ _ ____   |  _ \ _   _ _ __  |  _ \ __ _ _ __   ___| |")
    print(" | |   / _` |  __/ _` |_  /  | | | | | | | | | |_| |/ _` | '_ \ / _ \ |")
    print(" | |__| (_| | | | (_| |/ /   | |_| | |_| | | |  __/ (_| | | | |  __/ |")
    print("  \____\__,_|_|  \__,_/___|  |____/ \__, |_|  |_|  \__,_|_| |_|\___|_|")
    print("                                  |___/")
    print()
    print("              üéÆ Professional Minecraft Server Manager üéÆ")
    print("                        üíº Enterprise Edition v2.0 üíº")
    print()
    print("=" * 80)
    print("\033[0m")  # Reset color

def get_install_location():
    """Ask user for installation location"""
    print("\nüìç CHOOSE INSTALLATION LOCATION")
    print("=" * 50)
    print()
    print("1. Default Location: C:/CrazeDynPanel")
    print("2. Program Files: C:/Program Files/CrazeDynPanel")
    print("3. Documents:", Path.home() / "Documents" / "CrazeDynPanel")
    print("4. Desktop:", Path.home() / "Desktop" / "CrazeDynPanel")
    print("5. Custom Location (specify your own path)")
    print()
    
    while True:
        choice = input("Enter your choice (1-5): ").strip()
        
        if choice == "1":
            return Path("C:/CrazeDynPanel")
        elif choice == "2":
            return Path("C:/Program Files/CrazeDynPanel")
        elif choice == "3":
            return Path.home() / "Documents" / "CrazeDynPanel"
        elif choice == "4":
            return Path.home() / "Desktop" / "CrazeDynPanel"
        elif choice == "5":
            custom_path = input("Enter full path for installation: ").strip()
            return Path(custom_path)
        else:
            print("‚ùå Invalid choice! Please select 1-5.")

def get_install_mode():
    """Ask user for installation mode"""
    print("\nüéØ CHOOSE APPLICATION MODE")
    print("=" * 50)
    print()
    print("1. üñ•Ô∏è  Desktop GUI Mode")
    print("   ‚Ä¢ Beautiful PyQt6 desktop application")
    print("   ‚Ä¢ Perfect for local server management")
    print("   ‚Ä¢ Full-featured GUI with real-time monitoring")
    print()
    print("2. üåê Web Panel Mode")
    print("   ‚Ä¢ Modern web-based control panel")
    print("   ‚Ä¢ Access from any device (phone, tablet, computer)")
    print("   ‚Ä¢ Professional authentication system")
    print()
    print("3. üîó Both Modes (Recommended)")
    print("   ‚Ä¢ Install both desktop and web versions")
    print("   ‚Ä¢ Complete flexibility")
    print()
    
    while True:
        choice = input("Enter your choice (1-3): ").strip()
        
        if choice == "1":
            return "desktop", "Desktop GUI"
        elif choice == "2":
            return "web", "Web Panel"
        elif choice == "3":
            return "both", "Both Desktop & Web"
        else:
            print("‚ùå Invalid choice! Please select 1-3.")

def copy_files(source_dir, target_dir):
    """Copy all Main files to target directory"""
    print(f"\nüìã COPYING FILES")
    print("=" * 50)
    print()
    
    # Create target directory
    print(f"üìÅ Creating directory: {target_dir}")
    target_dir.mkdir(parents=True, exist_ok=True)
    
    # Copy all files
    print(f"üì¶ Copying files from: {source_dir}")
    print(f"üì¶ Copying files to: {target_dir}")
    
    for item in source_dir.iterdir():
        if item.is_file():
            shutil.copy2(item, target_dir / item.name)
            print(f"‚úÖ Copied: {item.name}")
        elif item.is_dir() and item.name not in ['.git', '__pycache__', '.pytest_cache']:
            shutil.copytree(item, target_dir / item.name, dirs_exist_ok=True)
            print(f"‚úÖ Copied folder: {item.name}")
    
    print("‚úÖ All files copied successfully!")

def create_launchers(install_path, mode):
    """Create launcher scripts"""
    print(f"\nüìã CREATING LAUNCHERS")
    print("=" * 50)
    
    if mode in ["desktop", "both"]:
        # Desktop launcher
        if platform.system() == "Windows":
            desktop_bat = install_path / "Start_Desktop.bat"
            with open(desktop_bat, 'w') as f:
                f.write(f"""@echo off
title CrazeDynPanel v2.0 - Desktop Mode
cd /d "{install_path}"
python launcher.py
pause""")
            print("‚úÖ Desktop launcher created: Start_Desktop.bat")
        else:
            desktop_sh = install_path / "start_desktop.sh"
            with open(desktop_sh, 'w') as f:
                f.write(f"""#!/bin/bash
cd "{install_path}"
python3 launcher.py
read -p "Press Enter to exit..."
""")
            desktop_sh.chmod(0o755)
            print("‚úÖ Desktop launcher created: start_desktop.sh")
    
    if mode in ["web", "both"]:
        # Web launcher
        if platform.system() == "Windows":
            web_bat = install_path / "Start_Web.bat"
            with open(web_bat, 'w') as f:
                f.write(f"""@echo off
title CrazeDynPanel v2.0 - Web Panel
cd /d "{install_path}"
python launcher.py --web
pause""")
            print("‚úÖ Web launcher created: Start_Web.bat")
        else:
            web_sh = install_path / "start_web.sh"
            with open(web_sh, 'w') as f:
                f.write(f"""#!/bin/bash
cd "{install_path}"
python3 launcher.py --web
read -p "Press Enter to exit..."
""")
            web_sh.chmod(0o755)
            print("‚úÖ Web launcher created: start_web.sh")

def install_dependencies(install_path, mode):
    """Install required dependencies"""
    print(f"\nüì¶ INSTALLING DEPENDENCIES")
    print("=" * 50)
    print()
    
    # Check Python
    print("üîç Checking Python installation...")
    try:
        result = subprocess.run([sys.executable, "--version"], capture_output=True, text=True)
        print(f"‚úÖ Python found: {result.stdout.strip()}")
    except Exception:
        print("‚ùå Python not found!")
        return False
    
    # Create requirements based on mode
    requirements = [
        "psutil",
        "requests", 
        "flask",
        "flask-socketio",
        "gunicorn",
        "bcrypt"
    ]
    
    if mode in ["desktop", "both"]:
        requirements.append("pyqt6")
    
    # Install packages
    print("üì¶ Installing required packages...")
    print("This may take a few minutes...")
    
    try:
        # Upgrade pip first
        subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], 
                      check=False, capture_output=True)
        
        # Install each package
        for package in requirements:
            print(f"üì¶ Installing {package}...")
            result = subprocess.run([sys.executable, "-m", "pip", "install", package], 
                                   capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {package} installed successfully")
            else:
                print(f"‚ö†Ô∏è {package} installation failed, but continuing...")
        
        print("‚úÖ Dependencies installation completed!")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è Some dependencies may have failed: {e}")
        print("The application may still work with limited features.")
        return False

def show_completion_info(install_path, mode, mode_name):
    """Show completion information"""
    print("\nüéâ INSTALLATION COMPLETE!")
    print("=" * 50)
    print()
    print(f"üìç Installation Location: {install_path}")
    print(f"üéØ Mode: {mode_name}")
    print()
    print("üöÄ HOW TO START:")
    print("=" * 30)
    
    if mode == "desktop":
        if platform.system() == "Windows":
            print(f"‚Ä¢ Double-click: {install_path}/Start_Desktop.bat")
        else:
            print(f"‚Ä¢ Run: {install_path}/start_desktop.sh")
        print(f"‚Ä¢ Or run: python launcher.py (from {install_path})")
    
    elif mode == "web":
        if platform.system() == "Windows":
            print(f"‚Ä¢ Double-click: {install_path}/Start_Web.bat")
        else:
            print(f"‚Ä¢ Run: {install_path}/start_web.sh")
        print(f"‚Ä¢ Or run: python launcher.py --web (from {install_path})")
        print("‚Ä¢ Then visit: http://localhost:5000 in your browser")
    
    elif mode == "both":
        print("Desktop Mode:")
        if platform.system() == "Windows":
            print(f"  ‚Ä¢ Double-click: {install_path}/Start_Desktop.bat")
        else:
            print(f"  ‚Ä¢ Run: {install_path}/start_desktop.sh")
        print()
        print("Web Panel Mode:")
        if platform.system() == "Windows":
            print(f"  ‚Ä¢ Double-click: {install_path}/Start_Web.bat")
        else:
            print(f"  ‚Ä¢ Run: {install_path}/start_web.sh")
        print("  ‚Ä¢ Then visit: http://localhost:5000 in your browser")
    
    print()
    print("üéÆ FEATURES:")
    print("=" * 30)
    print("‚Ä¢ Create and manage Minecraft servers")
    print("‚Ä¢ Playit.gg integration for worldwide access")
    print("‚Ä¢ Modern UI with professional authentication")
    print("‚Ä¢ Real-time monitoring and console access")
    print()
    print("üîó SUPPORT:")
    print("=" * 30)
    print("üí¨ Discord: https://dc.gg/zerocloud")
    print("üì∫ YouTube: https://www.youtube.com/@Zerobrine_7")
    print()

def main():
    """Main installer function"""
    # Check if we're running from the right directory
    current_dir = Path.cwd()
    if not (current_dir / "launcher.py").exists():
        print("‚ùå Please run this installer from the Main directory!")
        print(f"Current directory: {current_dir}")
        print("Expected file: launcher.py")
        input("Press Enter to exit...")
        return
    
    print_banner()
    
    print("üöÄ AUTOMATED INSTALLER")
    print("=" * 50)
    print()
    print("This installer will:")
    print("‚Ä¢ Ask for your preferred installation location")
    print("‚Ä¢ Let you choose between Desktop GUI or Web Panel mode")
    print("‚Ä¢ Copy all necessary files to your chosen location")
    print("‚Ä¢ Automatically download and install all dependencies")
    print("‚Ä¢ Set up everything ready to use!")
    print()
    input("Press Enter to continue...")
    
    # Get installation preferences
    install_path = get_install_location()
    mode, mode_name = get_install_mode()
    
    print(f"\nüìÇ Selected installation path: {install_path}")
    print(f"üéØ Selected mode: {mode_name}")
    confirm = input("\nIs this correct? (Y/N): ").strip().lower()
    if confirm != 'y':
        print("Installation cancelled.")
        return
    
    # Handle existing installation
    if install_path.exists():
        print(f"\n‚ö†Ô∏è Directory already exists: {install_path}")
        overwrite = input("Overwrite existing installation? (Y/N): ").strip().lower()
        if overwrite != 'y':
            print("Installation cancelled.")
            return
        print("üóëÔ∏è Removing existing files...")
        shutil.rmtree(install_path, ignore_errors=True)
    
    try:
        # Copy files
        copy_files(current_dir, install_path)
        
        # Create launchers
        create_launchers(install_path, mode)
        
        # Install dependencies
        install_dependencies(install_path, mode)
        
        # Show completion info
        show_completion_info(install_path, mode, mode_name)
        
        # Offer to start immediately
        start_now = input("Would you like to start CrazeDynPanel now? (Y/N): ").strip().lower()
        if start_now == 'y':
            if mode == "desktop":
                if platform.system() == "Windows":
                    subprocess.Popen([str(install_path / "Start_Desktop.bat")], shell=True)
                else:
                    subprocess.Popen([str(install_path / "start_desktop.sh")])
            elif mode == "web":
                if platform.system() == "Windows":
                    subprocess.Popen([str(install_path / "Start_Web.bat")], shell=True)
                else:
                    subprocess.Popen([str(install_path / "start_web.sh")])
                # Open browser
                import webbrowser
                webbrowser.open("http://localhost:5000")
            else:  # both
                choice = input("Start Desktop (1) or Web Panel (2)? Enter choice: ").strip()
                if choice == "1":
                    if platform.system() == "Windows":
                        subprocess.Popen([str(install_path / "Start_Desktop.bat")], shell=True)
                    else:
                        subprocess.Popen([str(install_path / "start_desktop.sh")])
                elif choice == "2":
                    if platform.system() == "Windows":
                        subprocess.Popen([str(install_path / "Start_Web.bat")], shell=True)
                    else:
                        subprocess.Popen([str(install_path / "start_web.sh")])
                    import webbrowser
                    webbrowser.open("http://localhost:5000")
        
        print("\nüéØ Thank you for choosing CrazeDynPanel v2.0! üéÆ")
        
    except Exception as e:
        print(f"\n‚ùå Installation failed: {e}")
        print("Please check permissions and try again.")
    
    input("\nPress Enter to exit...")

if __name__ == "__main__":
    main()